import { useState, useRef, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { 
  MessageSquare, 
  Send, 
  Bot, 
  User, 
  Sparkles, 
  Clock,
  CheckCircle,
  AlertTriangle,
  TrendingUp,
  FileText,
  X,
  Minimize2
} from "lucide-react";

interface ChatMessage {
  id: string;
  type: "user" | "assistant";
  content: string;
  timestamp: string;
  suggestions?: string[];
  attachments?: Array<{
    name: string;
    type: string;
  }>;
}

interface AiAssistantChatProps {
  isOpen: boolean;
  onToggle: () => void;
  onMinimize: () => void;
}

const mockMessages: ChatMessage[] = [
  {
    id: "1",
    type: "assistant",
    content: "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞–º–∏. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
    timestamp: "2025-01-27T10:00:00Z",
    suggestions: [
      "–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞",
      "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤",
      "–ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
      "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞—á–∞–º"
    ]
  }
];

const quickActions = [
  { 
    icon: TrendingUp, 
    label: "–ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è", 
    color: "text-primary",
    action: "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤"
  },
  { 
    icon: AlertTriangle, 
    label: "–†–∏—Å–∫–∏", 
    color: "text-destructive",
    action: "–ü–æ–∫–∞–∂–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö"
  },
  { 
    icon: CheckCircle, 
    label: "–ó–∞–¥–∞—á–∏", 
    color: "text-success",
    action: "–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Ç—Ä–µ–±—É—é—Ç –º–æ–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è?"
  },
  { 
    icon: FileText, 
    label: "–û—Ç—á—ë—Ç", 
    color: "text-warning",
    action: "–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é"
  }
];

export function AiAssistantChat({ isOpen, onToggle, onMinimize }: AiAssistantChatProps) {
  const [messages, setMessages] = useState<ChatMessage[]>(mockMessages);
  const [newMessage, setNewMessage] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async (content: string) => {
    if (!content.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      type: "user",
      content,
      timestamp: new Date().toISOString()
    };

    setMessages(prev => [...prev, userMessage]);
    setNewMessage("");
    setIsTyping(true);

    // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ AI
    setTimeout(() => {
      const assistantMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        type: "assistant",
        content: getAiResponse(content),
        timestamp: new Date().toISOString(),
        suggestions: getSuggestions(content)
      };

      setMessages(prev => [...prev, assistantMessage]);
      setIsTyping(false);
    }, 1500);
  };

  const getAiResponse = (userInput: string): string => {
    const input = userInput.toLowerCase();
    
    if (input.includes("—Ä–∏—Å–∫") || input.includes("—Ä–∏—Å–∫–∏")) {
      return "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—É—â–∏–µ —Ä–∏—Å–∫–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ:\n\nüî¥ **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏:**\n‚Ä¢ –ü—Ä–æ–µ–∫—Ç '–ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å –ê' - —Ä–∏—Å–∫ —Å—Ä—ã–≤–∞ —Å—Ä–æ–∫–æ–≤ 85%\n‚Ä¢ –ù–µ—Ö–≤–∞—Ç–∫–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤ (–∑–∞–≥—Ä—É–∑–∫–∞ 95%)\n\nüü° **–°—Ä–µ–¥–Ω–∏–µ —Ä–∏—Å–∫–∏:**\n‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ '–û—Ñ–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä'\n‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ 12% –≤ –ø—Ä–æ–µ–∫—Ç–µ '–¢–æ—Ä–≥–æ–≤—ã–π –∫–æ–º–ø–ª–µ–∫—Å'\n\nüìä –†–µ–∫–æ–º–µ–Ω–¥—É—é: –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∏ –ø—Ä–∏–≤–ª–µ—á—å –≤–Ω–µ—à–Ω–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.";
    }
    
    if (input.includes("–ø–æ—Ä—Ç—Ñ–µ–ª—å") || input.includes("–ø—Ä–æ–µ–∫—Ç")) {
      return "üìà **–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è:**\n\n‚úÖ **15 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤**\n‚Ä¢ 8 –≤ —Å—Ä–æ–∫ (53%)\n‚Ä¢ 4 —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ (27%)\n‚Ä¢ 3 –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è –¥–æ—Å—Ä–æ—á–Ω–æ (20%)\n\nüí∞ **–ë—é–¥–∂–µ—Ç:** 73% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ\nüë• **–†–µ—Å—É—Ä—Å—ã:** 87% –∑–∞–≥—Ä—É–∂–µ–Ω—ã\n\nüéØ **–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**\n‚Ä¢ ROI: +23%\n‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: 4.7/5\n‚Ä¢ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤: 92%";
    }
    
    if (input.includes("–∑–∞–¥–∞—á") || input.includes("–¥–µ–ª")) {
      return "üìã **–ó–∞–¥–∞—á–∏ —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è:**\n\nüî• **–°—Ä–æ—á–Ω—ã–µ (—Å–µ–≥–æ–¥–Ω—è):**\n‚Ä¢ –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ö–ú–î –¥–ª—è —ç—Ç–∞–∂–∞ 3\n‚Ä¢ –†–µ–≤—å—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π\n‚Ä¢ –í—Å—Ç—Ä–µ—á–∞ —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º –≤ 15:00\n\n‚è∞ **–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:**\n‚Ä¢ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ê\n‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ —Ñ–µ–≤—Ä–∞–ª—å\n‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞\n\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ö–ú–î - —ç—Ç–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç 3 –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á–∏.";
    }
    
    if (input.includes("–æ—Ç—á—ë—Ç") || input.includes("–æ—Ç—á–µ—Ç")) {
      return "üìä **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç (21-27 —è–Ω–≤–∞—Ä—è):**\n\n‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–æ:**\n‚Ä¢ 23 –∑–∞–¥–∞—á–∏\n‚Ä¢ 2 –ø—Ä–æ–µ–∫—Ç–∞ –ø–µ—Ä–µ—à–ª–∏ –≤ —Å–ª–µ–¥—É—é—â—É—é —Ñ–∞–∑—É\n‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ 2.5–ú‚ÇΩ\n\nüìà **–ü—Ä–æ–≥—Ä–µ—Å—Å:**\n‚Ä¢ –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è: +7%\n‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏: 12 —á–∞—Å–æ–≤\n‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –±—é–¥–∂–µ—Ç–∞: 340–ö‚ÇΩ\n\nüéØ **–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:**\n‚Ä¢ 18 –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á\n‚Ä¢ 3 –∫–ª—é—á–µ–≤—ã–µ –≤–µ—Ö–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤\n‚Ä¢ –ü–ª–∞–Ω–µ—Ä–∫–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤";
    }
    
    return "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –≥–æ—Ç–æ–≤–ª—é –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∑–∞–¥–∞—á. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä–∏—Å–∫–æ–≤, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ—Å—É—Ä—Å–æ–≤, –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç—á—ë—Ç–æ–≤ –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.";
  };

  const getSuggestions = (userInput: string): string[] => {
    const input = userInput.toLowerCase();
    
    if (input.includes("—Ä–∏—Å–∫")) {
      return [
        "–ö–∞–∫ —Å–Ω–∏–∑–∏—Ç—å —Ä–∏—Å–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –ê?",
        "–ü–ª–∞–Ω—ã –º–∏—Ç–∏–≥–∞—Ü–∏–∏ —Ä–∏—Å–∫–æ–≤",
        "–ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥—ã"
      ];
    }
    
    if (input.includes("–ø–æ—Ä—Ç—Ñ–µ–ª—å")) {
      return [
        "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±—é–¥–∂–µ—Ç–∞",
        "–ü—Ä–æ–≥–Ω–æ–∑ ROI –Ω–∞ –∫–≤–∞—Ä—Ç–∞–ª", 
        "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—à–ª—ã–º –ø–µ—Ä–∏–æ–¥–æ–º"
      ];
    }
    
    return [
      "–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
      "–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
      "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"
    ];
  };

  if (!isOpen) return null;

  return (
    <Card className="fixed bottom-4 right-4 w-96 h-[600px] shadow-xl border-2 border-primary/20 z-50">
      <CardHeader className="p-4 bg-gradient-to-r from-primary to-primary-glow text-white">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="w-8 h-8 rounded-full bg-white/20 flex items-center justify-center">
              <Bot className="w-4 h-4" />
            </div>
            <div>
              <CardTitle className="text-lg">AI –ü–æ–º–æ—â–Ω–∏–∫</CardTitle>
              <p className="text-sm opacity-90">–û–Ω–ª–∞–π–Ω</p>
            </div>
          </div>
          <div className="flex items-center gap-1">
            <Button
              size="sm"
              variant="ghost"
              className="text-white hover:bg-white/20 h-8 w-8 p-0"
              onClick={onMinimize}
            >
              <Minimize2 className="w-4 h-4" />
            </Button>
            <Button
              size="sm"
              variant="ghost"
              className="text-white hover:bg-white/20 h-8 w-8 p-0"
              onClick={onToggle}
            >
              <X className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </CardHeader>

      <CardContent className="p-0 flex flex-col h-[calc(600px-80px)]">
        {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        <div className="p-4 border-b bg-accent/30">
          <div className="grid grid-cols-2 gap-2">
            {quickActions.map((action, index) => (
              <Button
                key={index}
                variant="ghost"
                size="sm"
                className="justify-start gap-2 text-xs h-8"
                onClick={() => handleSendMessage(action.action)}
              >
                <action.icon className={`w-3 h-3 ${action.color}`} />
                {action.label}
              </Button>
            ))}
          </div>
        </div>

        {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
        <ScrollArea className="flex-1 p-4">
          <div className="space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex gap-3 ${
                  message.type === "user" ? "justify-end" : "justify-start"
                }`}
              >
                {message.type === "assistant" && (
                  <Avatar className="w-8 h-8 bg-primary">
                    <AvatarFallback>
                      <Bot className="w-4 h-4 text-white" />
                    </AvatarFallback>
                  </Avatar>
                )}
                
                <div
                  className={`max-w-[80%] ${
                    message.type === "user"
                      ? "bg-primary text-white"
                      : "bg-secondary"
                  } rounded-lg p-3`}
                >
                  <div className="text-sm whitespace-pre-line">
                    {message.content}
                  </div>
                  <div className="flex items-center gap-1 mt-2 opacity-70">
                    <Clock className="w-3 h-3" />
                    <span className="text-xs">
                      {new Date(message.timestamp).toLocaleTimeString('ru-RU', {
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                    </span>
                  </div>
                  
                  {message.suggestions && (
                    <div className="mt-3 space-y-1">
                      {message.suggestions.map((suggestion, index) => (
                        <Button
                          key={index}
                          variant="ghost"
                          size="sm"
                          className="w-full justify-start text-xs h-6 px-2"
                          onClick={() => handleSendMessage(suggestion)}
                        >
                          <Sparkles className="w-3 h-3 mr-1" />
                          {suggestion}
                        </Button>
                      ))}
                    </div>
                  )}
                </div>

                {message.type === "user" && (
                  <Avatar className="w-8 h-8 bg-secondary">
                    <AvatarFallback>
                      <User className="w-4 h-4" />
                    </AvatarFallback>
                  </Avatar>
                )}
              </div>
            ))}
            
            {isTyping && (
              <div className="flex gap-3">
                <Avatar className="w-8 h-8 bg-primary">
                  <AvatarFallback>
                    <Bot className="w-4 h-4 text-white" />
                  </AvatarFallback>
                </Avatar>
                <div className="bg-secondary rounded-lg p-3">
                  <div className="flex items-center gap-1">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-primary rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                    <span className="text-xs text-muted-foreground ml-2">–ü–µ—á–∞—Ç–∞–µ—Ç...</span>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>
        </ScrollArea>

        {/* –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è */}
        <div className="p-4 border-t">
          <div className="flex gap-2">
            <Input
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
              onKeyPress={(e) => {
                if (e.key === "Enter" && !e.shiftKey) {
                  e.preventDefault();
                  handleSendMessage(newMessage);
                }
              }}
              className="flex-1"
            />
            <Button
              size="sm"
              onClick={() => handleSendMessage(newMessage)}
              disabled={!newMessage.trim() || isTyping}
            >
              <Send className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}